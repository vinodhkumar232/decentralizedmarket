pragma solidity ^0.8.0;
contract DecentralizedMarketplace {
    struct Item {
        string name;
        uint256 price;
        address payable seller;
        address buyer;
        bool isSold;
    }

    mapping(uint256 => Item) public items;
    uint256 public itemCount;
    event ItemListed(uint256 itemId, string name, uint256 price, address seller);
    event ItemPurchased(uint256 itemId, string name, uint256 price, address seller, address buyer);
    function listItem(string memory _name, uint256 _price) public {
        require(_price > 0, "Price must be greater than zero");
        itemCount++;
        items[itemCount] = Item({
            name: _name,
            price: _price,
            seller: payable(msg.sender),
            buyer: address(0),
            isSold: false
        });

        emit ItemListed(itemCount, _name, _price, msg.sender);
    }

    function purchaseItem(uint256 _itemId) public payable {
        Item storage item = items[_itemId];
        require(_itemId > 0 && _itemId <= itemCount, "Item does not exist");
        require(!item.isSold, "Item is already sold");
        require(msg.value == item.price, "Payment must match the exact price");
        require(item.seller != msg.sender, "Seller cannot buy their own item");
        item.seller.transfer(msg.value);
        item.buyer = msg.sender;
        item.isSold = true;
        emit ItemPurchased(_itemId, item.name, item.price, item.seller, msg.sender);
    }
